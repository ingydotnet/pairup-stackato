#!/bin/bash

set -e
# set -x

# Set PAIRUP variables
PAIRUP_HOME=/home/pairup
PAIRUP_USER=stackato
PAIRUP_GROUP=stackato
PAIRUP_APP=/app/app
PAIRUP_CONF=pairup-conf.sh
PAIRUP_UPDATE=$PAIRUP_CONF/update
PAIRUP_START=$PAIRUP_CONF/start

function do_help {
    cat <<EOS
Usage:
    pairup conf [<dot-confs-repo>]         - Choose PairUp! configuration
    pairup create [<session-name>]         - Create a remote PairUp! session
    pairup ssh <pairup-session-name>       - ssh to container (w/ ForwardAgent)
    pairup init                            - First time setup
    pairup [start]                         - Enter the PairUp! tmux session
    pairup update                          - Install all the conf software
    help                                   - Show this message

EOS
}

function terse_time {
    if [ -e /usr/bin/time ]; then
        /usr/bin/time -f "[34mtime, real: [0m%E" "$@"
    else
        time "$@"
    fi
}

function do_create {
    if [[ -z "$1" ]]; then
        echo 'PairUp! session name required.'
        exit 1
    fi
    assert_conf $PAIRUP_CONF
    SESSION=$1
    terse_time stackato push $SESSION -n
    echo
    echo Now you are ready to:
    format_as_cmd "$0 ssh $SESSION"
    echo '  (…then' `format_as_cmd "pairup init"` \
            'from inside the Stackato VM.)'
}

function do_conf {
    if [[ -n "$1" ]]; then
        conf=$1
    elif [[ -n "$PAIRUP_CONF_FILE" ]]; then
        conf=$PAIRUP_CONF_FILE
    else
        cat <<EOS
You need a $PAIRUP_CONF file like:

    confs/sample-pairup-conf.sh

EOS
        while [[ -z "$conf" ]]; do
            echo -n 'Enter a pairup conf file name: '
            read conf
        done
    fi
    cp $conf $PAIRUP_CONF
    cat <<EOT
                         ┌──┐
                         ├╴ │
                _____. ^ │╶─┴┐
               / ____|   └───┘
          ____| O_________™
         /     \\___ \\     \\
        |     .____O |     |
         \\_...|_____...___/
               PairUp!™

   [Enering $conf mode.]

OK, now you are ready to `format_as_cmd "$0 create pairup-<somename>"`
EOT
}

function do_ssh {
    if [[ -z "$1" ]]; then
        echo 'PairUp! session name required.'
        exit 1
    fi

    grep ForwardAgent ~/.ssh/config > /dev/null || cat <<EOT
You probably want this in your ~/.ssh/config:

Host *
    ForwardAgent yes

...or else the repos you check out on your PairUp! session will have a hard
time "push"ing like you're used to.

(Connecting anyway...)
EOT

    # Doesn't time the speed of the command - unless you immediately ^d, of
    # course. It's more of a session timer.
    terse_time bash -c "$(stackato ssh --dry-run $1)"
}

function do_init {
    assert_on_vm
    assert_not_init
    assert_conf
    change_home

    if [[ -n "$PAIRUP_SSH_KNOWN_HOSTS" ]]; then
        echo $PAIRUP_SSH_KNOWN_HOSTS > /app/.ssh/known_hosts
    fi
    if [[ -n "PAIRUP_SSH_CONFIG" ]]; then
        echo $PAIRUP_SSH_CONFIG > /app/.ssh/config
    fi
    if [[ -n "$PAIRUP_DOTS_CONF" ]]; then
        cd
        git clone $PAIRUP_DOTDOTDOT_REPO ...
        scp $PAIRUP_DOTS_CONF .../conf
        .../... update
        .../... install
    fi
    if [[ -n "$PAIRUP_INIT_POST_COMMANDS" ]]; then
        eval "$PAIRUP_INIT_POST_COMMANDS"
    fi
    /bin/echo -e "\n\e[36;1mAlmost done.\e[0m"
    echo Now `format_as_cmd "pairup update"` 'and everything should be set!'
}

function do_start {
    assert_on_vm
    assert_not_started
    assert_init
    assert_conf
    change_home
    if [[ -n "$PAIRUP_START_COMMANDS" ]]; then
        eval "$PAIRUP_START_COMMANDS"
    fi
}

function do_update {
    assert_on_vm
    assert_init
    assert_conf
    change_home
    if [[ -n "$PAIRUP_UPDATE_COMMANDS" ]]; then
        terse_time eval "$PAIRUP_UPDATE_COMMANDS"
    fi
}

#------------------------------------------------------------------------------
function is_init {
    # Check is setup has happened
    if [[ `ls -A $PAIRUP_HOME 2>/dev/null | wc -l` -gt 0 ]]; then
        echo 1
    fi
}

function change_home {
    # Switch HOME dirs
    [[ ! -d $PAIRUP_HOME ]] &&
        sudo mkdir $PAIRUP_HOME &&
	sudo chown $PAIRUP_USER.$PAIRUP_GROUP $PAIRUP_HOME
    export HOME=$PAIRUP_HOME
    cd
}

#------------------------------------------------------------------------------
function assert_conf {
    local conf=${1:-$PAIRUP_APP/$PAIRUP_CONF}
    if [[ ! -f $conf ]]; then
        format_as_error "No '$conf' file. Cannot continue."
        echo "Try something like: " `format_as_cmd "$0 conf confs/sample-pairup-conf.sh"`
        exit 1
    fi
    source $conf
}

function assert_on_vm {
    if [ ! -d /app ]; then
        cat <<EOT
`format_as_error "Not on Stackato VM."`
 …so `format_as_cmd "$0 $command"` would be undesirable.

Try `format_as_cmd "$0 ssh <appname>"`
 (after `format_as_cmd "$0 conf <yourconf>.sh"` and `format_as_cmd "$0 create <appname>"`)
EOT
        exit 2
    fi
}

function assert_not_started {
    # Check if already started
    if [[ -n "$PAIRUP_STARTED" ]]; then
        echo "You are already inside a PairUp! session."
        exit 1
    fi
    export PAIRUP_STARTED=1
}

function assert_init {
    if [[ -z $(is_init) ]]; then
        cat <<'EOS'
PairUp! environment not set up.
Run `pairup init` first.
EOS
        exit 1
    fi
}

function assert_not_init {
    if [[ -n $(is_init) ]]; then
        cat <<EOS
PairUp! environment already set up.
EOS
        exit 1
    fi
}

function format_as_error {
    /bin/echo -e "[\e[31;1m$@\e[0m]"
}

function format_as_cmd {
    /bin/echo -e "\`\e[36m$@\e[0m\`"
}

#------------------------------------------------------------------------------

if [[ -n "$1" ]]; then
    command="$1"
    shift
else
    command="start"
fi
[[ $command == '-?' ]] || [[ $command == '-h' ]] ||
    [[ $command == '--help' ]] && command="help"
do_$command "$@"
