#!/bin/bash

set -xe
# set -x

# Set PAIRUP variables
PAIRUP_HOME=/home/pairup
PAIRUP_USER=stackato
PAIRUP_GROUP=stackato
PAIRUP_APP=/app/app
PAIRUP_CONF_DIR=pairup-conf
PAIRUP_CONF=$PAIRUP_CONF_DIR/conf

function do_help {
    cat <<EOS
Usage:
    pairup create [<session-name>]         - Create a remote PairUp! session
    pairup ssh <pairup-session-name>       - ssh to container (w/ ForwardAgent)
    pairup setup                           - Initial setup of PairUp! environment
    pairup [start]                         - Enter the PairUp! tmux session
    help                                   - Show this message

EOS
}

function terse_time {
    if [ -e /usr/bin/time ]; then
        /usr/bin/time -f "[34mtime, real: [0m%E" "$@"
    else
        time "$@"
    fi
}

function do_create {
    if [[ -z "$1" ]]; then
        echo 'PairUp! session name required.'
        exit 1
    fi
    assert_conf $PAIRUP_CONF
    SESSION=$1
    terse_time stackato push $SESSION -n
    echo
    echo Now you are ready to:
    format_as_cmd "$0 ssh $SESSION"
    echo '  (â€¦then' `format_as_cmd "pairup setup"` \
            'from inside the Stackato VM.)'
}

function do_ssh {
    if [[ -z "$1" ]]; then
        echo 'PairUp! session name required.'
        exit 1
    fi

    grep ForwardAgent ~/.ssh/config > /dev/null || cat <<EOT
You probably want this in your ~/.ssh/config:

Host *
    ForwardAgent yes

...or else the repos you check out on your PairUp! session will have a hard
time "push"ing like you're used to.

(Connecting anyway...)
EOT

    # Doesn't time the speed of the command - unless you immediately ^d, of
    # course. It's more of a session timer.
    terse_time bash -c "$(stackato ssh --dry-run $1)"
}

function do_setup {
    assert_on_vm
    assert_not_setup
    assert_conf
    change_home

    pairup_setup

    /bin/echo -e "\n\e[36;1mPairUp! setup is complete.\e[0m"
    echo Now run `format_as_cmd "pairup"` 'and start hacking!'
}

function do_start {
    assert_on_vm
    assert_not_started
    assert_setup
    assert_conf
    change_home
    if [[ $(ps aux | grep -c '[t]mux') -eq 0 ]]; then
        command='tmux -2'
    else
        command='tmux -2 a'
    fi

    export TMUXESC=a TMUXCOLOR=white
    exec /bin/bash -c "$command"
}


#------------------------------------------------------------------------------
function is_setup {
    # Check is setup has happened
    if [[ `ls -A $PAIRUP_HOME 2>/dev/null | wc -l` -gt 0 ]]; then
        echo 1
    fi
}

function change_home {
    # Switch HOME dirs
    [[ ! -d $PAIRUP_HOME ]] &&
        sudo mkdir $PAIRUP_HOME &&
	sudo chown $PAIRUP_USER.$PAIRUP_GROUP $PAIRUP_HOME
    export HOME=$PAIRUP_HOME
    cd
}

#------------------------------------------------------------------------------
function assert_conf {
    if [[ ! -d $PAIRUP_CONF_DIR ]]; then
        echo "You need a ./pairup-conf repo directory."
        echo "Try:"
        echo "    git clone https://github.com/sharpsaw/rkingy-pairup-conf.git pairup-conf"
        exit 1
    fi
    if [[ ! -f $PAIRUP_CONF ]]; then
        format_as_error "No '$PAIRUP_CONF' file. Cannot continue."
        exit 1
    fi
    source $PAIRUP_CONF
    export PATH=$PAIRUP_APP/$PAIRUP_CONF_DIR/bin:$PATH
}

function assert_on_vm {
    if [ ! -d /app ]; then
        cat <<EOT
`format_as_error "Not on Stackato VM."`
 â€¦so `format_as_cmd "$0 $command"` would be undesirable.

Try `format_as_cmd "$0 ssh <appname>"`
 (after `format_as_cmd "$0 conf <yourconf>.sh"` and `format_as_cmd "$0 create <appname>"`)
EOT
        exit 2
    fi
}

function assert_not_started {
    # Check if already started
    if [[ -n "$PAIRUP_STARTED" ]]; then
        echo "You are already inside a PairUp! session."
        exit 1
    fi
    export PAIRUP_STARTED=1
}

function assert_setup {
    if [[ -z $(is_setup) ]]; then
        cat <<'EOS'
PairUp! environment not set up.
Run `pairup setup` first.
EOS
        exit 1
    fi
}

function assert_not_setup {
    if [[ -n $(is_setup) ]]; then
        cat <<EOS
PairUp! environment already set up.
EOS
        exit 1
    fi
}

function format_as_error {
    /bin/echo -e "[\e[31;1m$@\e[0m]"
}

function format_as_cmd {
    /bin/echo -e "\`\e[36m$@\e[0m\`"
}

#------------------------------------------------------------------------------

if [[ -n "$1" ]]; then
    command="$1"
    shift
else
    command="start"
fi
[[ $command == '-?' ]] || [[ $command == '-h' ]] ||
    [[ $command == '--help' ]] && command="help"
do_$command "$@"
